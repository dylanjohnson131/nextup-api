// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NextUp.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NextUp.Api.Migrations
{
    [DbContext(typeof(NextUpDbContext))]
    [Migration("20251017011355_MakeTeamCoachIdOptional")]
    partial class MakeTeamCoachIdOptional
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NextUp.Models.AthleticDirector", b =>
                {
                    b.Property<int>("AthleticDirectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AthleticDirectorId"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Certification")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ExperienceYears")
                        .HasColumnType("integer");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("AthleticDirectorId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("idx_athleticdirector_user");

                    b.ToTable("AthleticDirector");
                });

            modelBuilder.Entity("NextUp.Models.Coach", b =>
                {
                    b.Property<int>("CoachId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CoachId"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Certification")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ExperienceYears")
                        .HasColumnType("integer");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("CoachId");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("idx_coach_team");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("idx_coach_user");

                    b.ToTable("Coach");
                });

            modelBuilder.Entity("NextUp.Models.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GameId"));

                    b.Property<int>("AwayScore")
                        .HasColumnType("integer");

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("GameDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("HomeScore")
                        .HasColumnType("integer");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Season")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("GameId");

                    b.HasIndex("AwayTeamId")
                        .HasDatabaseName("idx_away_team");

                    b.HasIndex("GameDate")
                        .HasDatabaseName("idx_game_date");

                    b.HasIndex("HomeTeamId")
                        .HasDatabaseName("idx_home_team");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("NextUp.Models.GameNote", b =>
                {
                    b.Property<int>("GameNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GameNoteId"));

                    b.Property<int>("CoachId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<string>("NoteType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("GameNoteId");

                    b.HasIndex("CoachId")
                        .HasDatabaseName("idx_gamenote_coach");

                    b.HasIndex("GameId")
                        .HasDatabaseName("idx_gamenote_game");

                    b.ToTable("GameNote");
                });

            modelBuilder.Entity("NextUp.Models.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PlayerId"));

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int?>("JerseyNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("PlayerId");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("idx_player_team");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_player_user");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("NextUp.Models.PlayerGameStats", b =>
                {
                    b.Property<int>("PlayerGameStatsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PlayerGameStatsId"));

                    b.Property<int>("Assists")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ExtraPointsAttempted")
                        .HasColumnType("integer");

                    b.Property<int>("ExtraPointsMade")
                        .HasColumnType("integer");

                    b.Property<int>("FieldGoalsAttempted")
                        .HasColumnType("integer");

                    b.Property<int>("FieldGoalsMade")
                        .HasColumnType("integer");

                    b.Property<int>("ForcedFumbles")
                        .HasColumnType("integer");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int>("Interceptions")
                        .HasColumnType("integer");

                    b.Property<int>("InterceptionsDef")
                        .HasColumnType("integer");

                    b.Property<int>("MinutesPlayed")
                        .HasColumnType("integer");

                    b.Property<int>("PassingTouchdowns")
                        .HasColumnType("integer");

                    b.Property<int>("PassingYards")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("ReceivingTouchdowns")
                        .HasColumnType("integer");

                    b.Property<int>("ReceivingYards")
                        .HasColumnType("integer");

                    b.Property<int>("Receptions")
                        .HasColumnType("integer");

                    b.Property<int?>("RecordedBy")
                        .HasColumnType("integer");

                    b.Property<int>("RushingTouchdowns")
                        .HasColumnType("integer");

                    b.Property<int>("RushingYards")
                        .HasColumnType("integer");

                    b.Property<int>("Sacks")
                        .HasColumnType("integer");

                    b.Property<int>("Tackles")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PlayerGameStatsId");

                    b.HasIndex("GameId")
                        .HasDatabaseName("idx_stats_game");

                    b.HasIndex("PlayerId")
                        .HasDatabaseName("idx_stats_player");

                    b.HasIndex("RecordedBy");

                    b.HasIndex("PlayerId", "GameId")
                        .IsUnique()
                        .HasDatabaseName("idx_player_game_unique");

                    b.ToTable("PlayerGameStats");
                });

            modelBuilder.Entity("NextUp.Models.PlayerGoal", b =>
                {
                    b.Property<int>("PlayerGoalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PlayerGoalId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentValue")
                        .HasColumnType("integer");

                    b.Property<string>("GoalType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<string>("Season")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("TargetValue")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PlayerGoalId");

                    b.HasIndex("PlayerId")
                        .HasDatabaseName("idx_goal_player");

                    b.ToTable("PlayerGoal");
                });

            modelBuilder.Entity("NextUp.Models.PlayerNote", b =>
                {
                    b.Property<int>("PlayerNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PlayerNoteId"));

                    b.Property<int>("CoachId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PlayerNoteId");

                    b.HasIndex("CoachId")
                        .HasDatabaseName("idx_playernote_coach");

                    b.HasIndex("PlayerId")
                        .HasDatabaseName("idx_playernote_player");

                    b.ToTable("PlayerNote");
                });

            modelBuilder.Entity("NextUp.Models.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TeamId"));

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("CoachId")
                        .HasColumnType("integer");

                    b.Property<string>("Conference")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Division")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Mascot")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("School")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TeamId");

                    b.HasIndex("CoachId")
                        .HasDatabaseName("idx_team_coach");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("NextUp.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("NextUp.Models.AthleticDirector", b =>
                {
                    b.HasOne("NextUp.Models.User", "User")
                        .WithOne("AthleticDirector")
                        .HasForeignKey("NextUp.Models.AthleticDirector", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NextUp.Models.Coach", b =>
                {
                    b.HasOne("NextUp.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("NextUp.Models.User", "User")
                        .WithOne("Coach")
                        .HasForeignKey("NextUp.Models.Coach", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NextUp.Models.Game", b =>
                {
                    b.HasOne("NextUp.Models.Team", "AwayTeam")
                        .WithMany("AwayGames")
                        .HasForeignKey("AwayTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NextUp.Models.Team", "HomeTeam")
                        .WithMany("HomeGames")
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AwayTeam");

                    b.Navigation("HomeTeam");
                });

            modelBuilder.Entity("NextUp.Models.GameNote", b =>
                {
                    b.HasOne("NextUp.Models.User", "Coach")
                        .WithMany("GameNotes")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextUp.Models.Game", "Game")
                        .WithMany("GameNotes")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("NextUp.Models.Player", b =>
                {
                    b.HasOne("NextUp.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextUp.Models.User", "User")
                        .WithMany("Players")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NextUp.Models.PlayerGameStats", b =>
                {
                    b.HasOne("NextUp.Models.Game", "Game")
                        .WithMany("PlayerStats")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextUp.Models.Player", "Player")
                        .WithMany("GameStats")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextUp.Models.User", "RecordedByUser")
                        .WithMany("RecordedStats")
                        .HasForeignKey("RecordedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Game");

                    b.Navigation("Player");

                    b.Navigation("RecordedByUser");
                });

            modelBuilder.Entity("NextUp.Models.PlayerGoal", b =>
                {
                    b.HasOne("NextUp.Models.Player", "Player")
                        .WithMany("Goals")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("NextUp.Models.PlayerNote", b =>
                {
                    b.HasOne("NextUp.Models.User", "Coach")
                        .WithMany("PlayerNotes")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NextUp.Models.Player", "Player")
                        .WithMany("Notes")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("NextUp.Models.Team", b =>
                {
                    b.HasOne("NextUp.Models.User", "Coach")
                        .WithMany("Teams")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("NextUp.Models.Game", b =>
                {
                    b.Navigation("GameNotes");

                    b.Navigation("PlayerStats");
                });

            modelBuilder.Entity("NextUp.Models.Player", b =>
                {
                    b.Navigation("GameStats");

                    b.Navigation("Goals");

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("NextUp.Models.Team", b =>
                {
                    b.Navigation("AwayGames");

                    b.Navigation("HomeGames");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("NextUp.Models.User", b =>
                {
                    b.Navigation("AthleticDirector")
                        .IsRequired();

                    b.Navigation("Coach")
                        .IsRequired();

                    b.Navigation("GameNotes");

                    b.Navigation("PlayerNotes");

                    b.Navigation("Players");

                    b.Navigation("RecordedStats");

                    b.Navigation("Teams");
                });
#pragma warning restore 612, 618
        }
    }
}
